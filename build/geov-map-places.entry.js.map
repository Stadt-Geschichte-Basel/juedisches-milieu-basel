{"file":"geov-map-places.entry.esm.js","mappings":"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","names":[],"sources":["node_modules/@geovistory/design-system-web/dist/collection/components/geov-map-places/geov-map-places.css?tag=geov-map-places","node_modules/@geovistory/design-system-web/dist/collection/components/geov-map-places/geov-map-places.js"],"sourcesContent":["geov-map-places {\n  display: block;\n  position: relative;\n  width: 100%;\n  height: 100%;\n  --point-color: var(--ion-color-primary, #3880ff);\n  --circle-color-small: #fc8d59;\n  --circle-color-medium: #ffffbf;\n  --circle-color-large: #91bfdb;\n}\n\ngeov-map-places ion-toast {\n  --background: var(--ion-color-danger, red);\n}\n\n.loading {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background-color: var(--ion-color-light-tint, #fafafa);\n}\n","import { h, Host } from \"@stencil/core\";\nimport { isNode } from \"../../lib/isNode\";\nimport { importMapLibre } from \"../../lib/importMapLibre\";\nimport { sparqlJson } from \"../../lib/sparqlJson\";\n/**\n * This component fetches <a href=\"https://ontome.net/ontology/c363\">geographical places</a> from a project's SPARQL endpoint and their\n * <a href=\"https://ontome.net/ontology/c51\">coordinates</a> using <a href=\"https://ontome.net/ontology/p147\">had presence</a>\n * and <a href=\"https://ontome.net/ontology/p148\">was at</a>) properties, then displays them on a map. The map shows\n * linked markers that guide users to the respective locations within the project. The map is built using on MapLibre.\n */\nexport class GeovMapPlaces {\n  constructor() {\n    this.parseResponse = (res, mapObject) => {\n      var _a;\n      // Parse the response and update the markers on the map\n      const response = (_a = res === null || res === void 0 ? void 0 : res.results) === null || _a === void 0 ? void 0 : _a.bindings;\n      // If there are too many results, show a card\n      if (response.length >= this.limit) {\n        const card = this.el.querySelector('ion-card');\n        card.style.setProperty('display', 'block');\n        card.querySelector('ion-card-title').innerHTML = `Too many results (${response.length})`;\n      }\n      response.forEach(ele => {\n        const featureId = ele['subject'].value;\n        const locName = ele['geoPlaceLabel'].value;\n        if (!this.markers.ids.has(featureId)) {\n          this.markers.features.push({\n            type: 'Feature',\n            geometry: {\n              type: 'Point',\n              coordinates: [parseFloat(ele['long'].value), parseFloat(ele['lat'].value)],\n            },\n            properties: {\n              name: locName,\n              link: featureId,\n            },\n          });\n          this.markers.ids.add(featureId);\n        }\n      });\n      mapObject.getSource('places').setData(this.markers);\n    };\n    this.sparqlEndpoint = undefined;\n    this.limit = 10000;\n    this.center = [8.2318, 46.7985];\n    this.zoom = 6;\n    this.queryBoundingBox = true;\n    this.projectID = undefined;\n    this.loading = undefined;\n    this.markers = {\n      type: 'FeatureCollection',\n      features: [],\n      ids: new Set(),\n    };\n  }\n  async componentDidLoad() {\n    // If we are in a browser\n    if (!isNode()) {\n      this.loading = true;\n      // Load MapLibre script\n      const MapLibre = await importMapLibre();\n      const map = new MapLibre.Map({\n        container: this.el,\n        style: {\n          version: 8,\n          sources: {\n            osm: {\n              type: 'raster',\n              tiles: [\n                'https://a.basemaps.cartocdn.com/rastertiles/light_nolabels/{z}/{x}/{y}{ratio}.png',\n                'https://b.basemaps.cartocdn.com/rastertiles/light_nolabels/{z}/{x}/{y}{ratio}.png',\n                'https://c.basemaps.cartocdn.com/rastertiles/light_nolabels/{z}/{x}/{y}{ratio}.png',\n              ],\n              tileSize: 256,\n              attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors &copy; <a href=\"https://carto.com/attributions\">CARTO</a>',\n              maxzoom: 19,\n            },\n          },\n          layers: [\n            {\n              id: 'osm',\n              type: 'raster',\n              source: 'osm', // This must match the source key above\n            },\n          ],\n          glyphs: 'https://demotiles.maplibre.org/font/{fontstack}/{range}.pbf',\n        },\n        center: this.center,\n        zoom: this.zoom,\n      });\n      // request to the provided sparql endpoint\n      const qrPlaces = (bounds) => `\n      PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n      PREFIX ontome: <https://ontome.net/ontology/>\n      PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>\n\n      SELECT ?subject ?geoPlaceLabel ?long ?lat\n          WHERE {?subject ^ontome:p147 ?presence.\n          ?subject rdfs:label    ?geoPlaceLabel.\n          ?presence ontome:p148 ?place.\n          bind(replace(str(?place), '<http://www.opengis.net/def/crs/EPSG/0/4326>', \"\", \"i\") as ?rep)\n          bind( replace( str(?rep), \"^[^0-9\\.-]*([-]?[0-9\\.]+) .*$\", \"$1\" ) as ?long )\n          bind( replace( str(?rep), \"^.* ([-]?[0-9\\.]+)[^0-9\\.]*$\", \"$1\" ) as ?lat )\n          ${this.queryBoundingBox\n        ? `\n          FILTER (\n            xsd:double(?lat) >= ${bounds._sw.lat.toFixed(3)} &&\n            xsd:double(?lat) <= ${bounds._ne.lat.toFixed(3)} &&\n            xsd:double(?long) >= ${bounds._sw.lng.toFixed(3)} &&\n            xsd:double(?long) <= ${bounds._ne.lng.toFixed(3)}\n        )`\n        : ''}\n        }\n        LIMIT ${this.limit}\n          `;\n      map.on('load', () => {\n        map.addSource('places', {\n          type: 'geojson',\n          data: this.markers,\n          cluster: true,\n          clusterMaxZoom: 12,\n          clusterRadius: 40, // Radius of each cluster when clustering points (defaults to 50)\n        });\n        const computedStyle = getComputedStyle(this.el);\n        const customColors = [\n          computedStyle.getPropertyValue('--point-color') || 'red',\n          computedStyle.getPropertyValue('--circle-color-small') || 'red',\n          computedStyle.getPropertyValue('--circle-color-medium') || 'green',\n          computedStyle.getPropertyValue('--circle-color-large') || 'grey',\n        ];\n        map.addLayer({\n          id: 'clusters',\n          type: 'circle',\n          source: 'places',\n          filter: ['has', 'point_count'],\n          paint: {\n            // Use step expressions (https://maplibre.org/maplibre-style-spec/#expressions-step)\n            // with three steps to implement three types of circles:\n            //   * --circle-color-small, 20px circles when point count is less than 100\n            //   * --circle-color-medium, 30px circles when point count is between 100 and 750\n            //   * --circle-color-large, 40px circles when point count is greater than or equal to 750\n            'circle-color': ['step', ['get', 'point_count'], customColors[1], 100, customColors[2], 750, customColors[3]],\n            'circle-radius': ['step', ['get', 'point_count'], 20, 100, 30, 750, 40],\n          },\n        });\n        map.addLayer({\n          id: 'cluster-count',\n          type: 'symbol',\n          source: 'places',\n          filter: ['has', 'point_count'],\n          layout: {\n            'text-field': '{point_count_abbreviated}',\n            'text-size': 12,\n          },\n        });\n        map.addLayer({\n          id: 'unclustered-point',\n          type: 'circle',\n          source: 'places',\n          filter: ['!', ['has', 'point_count']],\n          paint: {\n            // --point-color\n            'circle-color': customColors[0],\n            'circle-radius': 10,\n          },\n        });\n        //   Add popups to the markers\n        const handleMarkerClick = e => {\n          const feature = e.features[0];\n          const coordinates = feature.geometry.coordinates;\n          const description = feature.properties.name;\n          const link = this.projectID ? `${feature.properties.link}?p=${this.projectID}` : feature.properties.link;\n          new MapLibre.Popup().setLngLat(coordinates).setHTML(`<div><a href = \"${link}\" target=\"_blank\">${description}</a></div>`).addTo(map);\n        };\n        // An on click event listener for the \"unclustered-point\" layer\n        map.on('click', 'unclustered-point', handleMarkerClick);\n        map.on('mouseenter', 'unclustered-point', () => {\n          map.getCanvas().style.cursor = 'pointer';\n        });\n        map.on('mouseleave', 'unclustered-point', () => {\n          map.getCanvas().style.cursor = '';\n        });\n        // Fetch data from the SPARQL endpoint\n        sparqlJson(this.sparqlEndpoint, qrPlaces(map.getBounds())).then(res => this.parseResponse(res, map));\n      });\n      if (this.queryBoundingBox) {\n        // Limit the query whenever vie is moved/zoomed\n        map.on('moveend', () => {\n          var _a;\n          // Remove the card\n          (_a = this.el.querySelectorAll('ion-card')) === null || _a === void 0 ? void 0 : _a.forEach(ele => ele.style.setProperty('display', 'none'));\n          // Fetch data from the SPARQL endpoint\n          sparqlJson(this.sparqlEndpoint, qrPlaces(map.getBounds())).then(res => this.parseResponse(res, map));\n        });\n      }\n      this.loading = false;\n    }\n  }\n  render() {\n    return (h(Host, null, this.loading && (h(\"div\", { style: { width: 100 + '%', height: 100 + '%' }, class: \"loading\" }, h(\"ion-spinner\", { name: \"dots\" }))), h(\"ion-card\", { style: { display: 'none', zIndex: '1000' } }, h(\"ion-card-header\", null, h(\"ion-card-title\", null, \"Too many results\")), h(\"ion-card-content\", null, \"please zoom in to see all available datapoints in a given location\"))));\n  }\n  static get is() { return \"geov-map-places\"; }\n  static get originalStyleUrls() {\n    return {\n      \"$\": [\"geov-map-places.css\"]\n    };\n  }\n  static get styleUrls() {\n    return {\n      \"$\": [\"geov-map-places.css\"]\n    };\n  }\n  static get properties() {\n    return {\n      \"sparqlEndpoint\": {\n        \"type\": \"string\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"string\",\n          \"resolved\": \"string\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"sparqlEndpoint\\nURL of the sparql endpoint\"\n        },\n        \"attribute\": \"sparql-endpoint\",\n        \"reflect\": false\n      },\n      \"limit\": {\n        \"type\": \"number\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"number\",\n          \"resolved\": \"number\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"Maximum of Objects fetched (LIMIT)\"\n        },\n        \"attribute\": \"limit\",\n        \"reflect\": false,\n        \"defaultValue\": \"10000\"\n      },\n      \"center\": {\n        \"type\": \"unknown\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"[number, number]\",\n          \"resolved\": \"[number, number]\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"The center of the map\"\n        },\n        \"defaultValue\": \"[8.2318, 46.7985]\"\n      },\n      \"zoom\": {\n        \"type\": \"number\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"number\",\n          \"resolved\": \"number\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"The initial zoomlevel of the map\"\n        },\n        \"attribute\": \"zoom\",\n        \"reflect\": false,\n        \"defaultValue\": \"6\"\n      },\n      \"queryBoundingBox\": {\n        \"type\": \"boolean\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"boolean\",\n          \"resolved\": \"boolean\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"The results are restricted to the visible part of the map\"\n        },\n        \"attribute\": \"query-bounding-box\",\n        \"reflect\": false,\n        \"defaultValue\": \"true\"\n      },\n      \"projectID\": {\n        \"type\": \"number\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"number\",\n          \"resolved\": \"number\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"The ID of the project to be redirected to\"\n        },\n        \"attribute\": \"project-i-d\",\n        \"reflect\": false\n      }\n    };\n  }\n  static get states() {\n    return {\n      \"loading\": {},\n      \"markers\": {}\n    };\n  }\n  static get elementRef() { return \"el\"; }\n}\n//# sourceMappingURL=geov-map-places.js.map\n"],"version":3}