{"file":"geov-data-fetch-example.entry.esm.js","mappings":"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","names":[],"sources":["node_modules/@geovistory/design-system-web/dist/collection/components/geov-data-fetch-example/geov-data-fetch-example.css?tag=geov-data-fetch-example","node_modules/@geovistory/design-system-web/dist/collection/components/geov-data-fetch-example/geov-data-fetch-example.js"],"sourcesContent":[":host {\n  display: block;\n}\n","import { h, Host } from \"@stencil/core\";\nimport { sparqlJson } from \"../../lib/sparqlJson\";\nimport { getSSRData } from \"../../lib/ssr/getSSRData\";\nimport { setSSRData } from \"../../lib/ssr/setSSRData\";\nimport { setSSRId } from \"../../lib/ssr/setSSRId\";\nconst qrLabel = (id) => `\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX geov: <http://geovistory.org/resource/>\n\nSELECT ?o\nWHERE {\n  geov:${id} rdfs:label ?o .\n}\nLIMIT 1\n`;\n/**\n * This component is an example for developers who want to ceate a component that\n *\n * - fetches data from a sparql endpoint\n * - is prepared for SSR and hydration\n */\nexport class GeovDataFetchExample {\n  constructor() {\n    this.buttonClick = (e) => {\n      this.msg = 'clicked' + e.offsetX;\n    };\n    this._ssrId = undefined;\n    this.sparqlEndpoint = undefined;\n    this.entityId = undefined;\n    this.data = undefined;\n    this.msg = undefined;\n    // set id for server side rendering of dynamic data\n    setSSRId(this);\n  }\n  /**\n   * called once when component is ready. good for data fetching.\n   * if `componentWillLoad()` returns a promise, stencil hydrate\n   * awaits this promise for server side rendering. See:\n   * https://stenciljs.com/docs/static-site-generation-basics\n   */\n  async componentWillLoad() {\n    // try to get data from ssr\n    this.data = getSSRData(this._ssrId);\n    // if no data found, fetchData\n    if (!this.data) {\n      // set data to loading (in immutable way)\n      this.data = { loading: true };\n      // fetch data via http\n      await this.fetchData() // <- await this promise!\n        .then(d => {\n        this.data = d;\n        setSSRData(this._ssrId, d);\n        return d;\n      })\n        .catch(d => {\n        this.data = d;\n        return d;\n      });\n      this.msg = 'component data was fetched by component';\n    }\n  }\n  /**\n   * Do the sparql request(s)\n   * @returns a Promise with the data for this component\n   */\n  async fetchData() {\n    return sparqlJson(this.sparqlEndpoint, qrLabel(this.entityId))\n      .then(res => {\n      var _a, _b, _c, _d;\n      // process and return the data in case of success\n      return Object.assign(Object.assign({}, this.data), { label: ((_d = (_c = (_b = (_a = res === null || res === void 0 ? void 0 : res.results) === null || _a === void 0 ? void 0 : _a.bindings) === null || _b === void 0 ? void 0 : _b[0]) === null || _c === void 0 ? void 0 : _c.o) === null || _d === void 0 ? void 0 : _d.value) + ' fetched at: ' + new Date().toTimeString(), loading: false });\n    })\n      .catch(_ => {\n      // process and return the data in case of error\n      return Object.assign(Object.assign({}, this.data), { error: true, loading: false });\n    });\n  }\n  render() {\n    return (h(Host, null, h(\"div\", null, this.msg), this.data.label, this.data.loading ? `loading...` : ``, this.data.error ? `error!` : ``, !this.data.label && !this.data.loading && !this.data.error ? h(\"span\", { class: \"no-label-found\" }, \"no label found\") : ``, h(\"button\", { onClick: this.buttonClick }, \"click me!\"), h(\"slot\", null)));\n  }\n  static get is() { return \"geov-data-fetch-example\"; }\n  static get originalStyleUrls() {\n    return {\n      \"$\": [\"geov-data-fetch-example.css\"]\n    };\n  }\n  static get styleUrls() {\n    return {\n      \"$\": [\"geov-data-fetch-example.css\"]\n    };\n  }\n  static get properties() {\n    return {\n      \"_ssrId\": {\n        \"type\": \"string\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"string\",\n          \"resolved\": \"string\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"_ssrId is short for server side rendering id and\\nidentifies this component and the fetched data\\nrespectively. Set this only if you want to\\nenable this component to fetch serve side\"\n        },\n        \"attribute\": \"_ssr-id\",\n        \"reflect\": true\n      },\n      \"sparqlEndpoint\": {\n        \"type\": \"string\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"string\",\n          \"resolved\": \"string\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"sparqlEndpoint\\nURL of the sparql endpoint\"\n        },\n        \"attribute\": \"sparql-endpoint\",\n        \"reflect\": false\n      },\n      \"entityId\": {\n        \"type\": \"string\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"string\",\n          \"resolved\": \"string\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"entityId\\nID number of entity, e.g. 'i315800'\"\n        },\n        \"attribute\": \"entity-id\",\n        \"reflect\": false\n      }\n    };\n  }\n  static get states() {\n    return {\n      \"data\": {},\n      \"msg\": {}\n    };\n  }\n}\n//# sourceMappingURL=geov-data-fetch-example.js.map\n"],"version":3}