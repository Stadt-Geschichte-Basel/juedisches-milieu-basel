{"file":"geov-if.entry.esm.js","mappings":"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","names":[],"sources":["node_modules/@geovistory/design-system-web/dist/collection/components/geov-if/geov-if.css?tag=geov-if","node_modules/@geovistory/design-system-web/dist/collection/components/geov-if/geov-if.js"],"sourcesContent":[":host {\n  display: block;\n}\n","import { h, Host } from \"@stencil/core\";\nimport { sparqlJson } from \"../../lib/sparqlJson\";\nimport { getSSRData } from \"../../lib/ssr/getSSRData\";\nimport { setSSRData } from \"../../lib/ssr/setSSRData\";\nimport { setSSRId } from \"../../lib/ssr/setSSRId\";\n/**\n * Small helper component to wrap a piece of html\n * into a container that does a sparql request and displays\n * its children, if the request returns `true` on the\n * `?condition` binding of the first returned record.\n */\nexport class GeovIf {\n  constructor() {\n    this._ssrId = undefined;\n    this.sparqlEndpoint = undefined;\n    this.sparqlQuery = undefined;\n    this.data = { loading: true, showChildren: false };\n    setSSRId(this);\n  }\n  async componentWillLoad() {\n    // try to get data from ssr\n    this.data = getSSRData(this._ssrId);\n    // if no data found, fetchData\n    if (!this.data) {\n      // set data to loading (in immutable way)\n      this.data = { loading: true, showChildren: false };\n      await this.fetchData()\n        .then(d => {\n        this.data = d;\n        setSSRData(this._ssrId, d);\n        return d;\n      })\n        .catch(d => {\n        this.data = d;\n        return d;\n      });\n    }\n  }\n  /**\n   * Do the sparql request(s)\n   * @returns a Promise with the data for this component\n   */\n  async fetchData() {\n    const q = this.sparqlQuery\n      .replace(/&amp;/g, '&')\n      .replace(/&lt;/g, '<')\n      .replace(/&gt;/g, '>')\n      .replace(/&quot;/g, '\"')\n      .replace(/&apos;/g, \"'\");\n    return sparqlJson(this.sparqlEndpoint, q)\n      .then(res => {\n      var _a, _b, _c, _d;\n      const showChildren = ((_d = (_c = (_b = (_a = res === null || res === void 0 ? void 0 : res.results) === null || _a === void 0 ? void 0 : _a.bindings) === null || _b === void 0 ? void 0 : _b[0]) === null || _c === void 0 ? void 0 : _c.condition) === null || _d === void 0 ? void 0 : _d.value) === 'true' ? true : false;\n      return Object.assign(Object.assign({}, this.data), { showChildren, loading: false });\n    })\n      .catch(_ => {\n      return Object.assign(Object.assign({}, this.data), { error: true, loading: false });\n    });\n  }\n  render() {\n    const display = this.data.showChildren ? 'initital' : 'none';\n    return (h(Host, null, h(\"div\", { style: { display: display } }, h(\"slot\", null))));\n  }\n  static get is() { return \"geov-if\"; }\n  static get originalStyleUrls() {\n    return {\n      \"$\": [\"geov-if.css\"]\n    };\n  }\n  static get styleUrls() {\n    return {\n      \"$\": [\"geov-if.css\"]\n    };\n  }\n  static get properties() {\n    return {\n      \"_ssrId\": {\n        \"type\": \"string\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"string\",\n          \"resolved\": \"string\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"\"\n        },\n        \"attribute\": \"_ssr-id\",\n        \"reflect\": true\n      },\n      \"sparqlEndpoint\": {\n        \"type\": \"string\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"string\",\n          \"resolved\": \"string\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"sparqlEndpoint\\nURL of the sparql endpoint\"\n        },\n        \"attribute\": \"sparql-endpoint\",\n        \"reflect\": false\n      },\n      \"sparqlQuery\": {\n        \"type\": \"string\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"string\",\n          \"resolved\": \"string\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"A sparql query with binding ?condition of type ^^xsd:bolean.\\nIf the first ?condition of response is true,\\nthe children of the element are rendered, otherwise not.\\n\\nExample:\\n```sparql\\n# check if geov:i836507 is annotated entity (ontome:p1875)\\n# of an annotation in text (ontome:p1875)\\nPREFIX ontome: <https://ontome.net/ontology/>\\nPREFIX geov: <http://geovistory.org/resource/>\\n\\nSELECT  ((count(?subject ) > 0)as ?condition)\\nWHERE {\\n  ?subject ontome:p1875 geov:i836507 .\\n  ?subject a ontome:c933\\n}\\nGROUP BY ?subject\\nLIMIT 1\\n```\"\n        },\n        \"attribute\": \"sparql-query\",\n        \"reflect\": false\n      }\n    };\n  }\n  static get states() {\n    return {\n      \"data\": {}\n    };\n  }\n}\n//# sourceMappingURL=geov-if.js.map\n"],"version":3}