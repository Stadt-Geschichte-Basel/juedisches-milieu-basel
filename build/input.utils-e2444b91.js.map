{"file":"input.utils-e2444b91.js","mappings":"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","names":[],"sources":["node_modules/@ionic/core/dist/collection/utils/slot-mutation-controller.js","node_modules/@ionic/core/dist/collection/components/input/input.utils.js"],"sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { win } from \"./browser/index\";\nimport { raf } from \"./helpers\";\n/**\n * Used to update a scoped component that uses emulated slots. This fires when\n * content is passed into the slot or when the content inside of a slot changes.\n * This is not needed for components using native slots in the Shadow DOM.\n * @internal\n * @param el The host element to observe\n * @param slotName mutationCallback will fire when nodes on this slot change\n * @param mutationCallback The callback to fire whenever the slotted content changes\n */\nexport const createSlotMutationController = (el, slotName, mutationCallback) => {\n  let hostMutationObserver;\n  let slottedContentMutationObserver;\n  if (win !== undefined && 'MutationObserver' in win) {\n    hostMutationObserver = new MutationObserver((entries) => {\n      for (const entry of entries) {\n        for (const node of entry.addedNodes) {\n          /**\n           * Check to see if the added node\n           *  is our slotted content.\n           */\n          if (node.nodeType === Node.ELEMENT_NODE && node.slot === slotName) {\n            /**\n             * If so, we want to watch the slotted\n             * content itself for changes. This lets us\n             * detect when content inside of the slot changes.\n             */\n            mutationCallback();\n            /**\n             * Adding the listener in an raf\n             * waits until Stencil moves the slotted element\n             * into the correct place in the event that\n             * slotted content is being added.\n             */\n            raf(() => watchForSlotChange(node));\n            return;\n          }\n        }\n      }\n    });\n    hostMutationObserver.observe(el, {\n      childList: true,\n    });\n  }\n  /**\n   * Listen for changes inside of the slotted content.\n   * We can listen for subtree changes here to be\n   * informed of text within the slotted content\n   * changing. Doing this on the host is possible\n   * but it is much more expensive to do because\n   * it also listens for changes to the internals\n   * of the component.\n   */\n  const watchForSlotChange = (slottedEl) => {\n    var _a;\n    if (slottedContentMutationObserver) {\n      slottedContentMutationObserver.disconnect();\n      slottedContentMutationObserver = undefined;\n    }\n    slottedContentMutationObserver = new MutationObserver((entries) => {\n      mutationCallback();\n      for (const entry of entries) {\n        for (const node of entry.removedNodes) {\n          /**\n           * If the element was removed then we\n           * need to destroy the MutationObserver\n           * so the element can be garbage collected.\n           */\n          if (node.nodeType === Node.ELEMENT_NODE && node.slot === slotName) {\n            destroySlottedContentObserver();\n          }\n        }\n      }\n    });\n    /**\n     * Listen for changes inside of the element\n     * as well as anything deep in the tree.\n     * We listen on the parentElement so that we can\n     * detect when slotted element itself is removed.\n     */\n    slottedContentMutationObserver.observe((_a = slottedEl.parentElement) !== null && _a !== void 0 ? _a : slottedEl, { subtree: true, childList: true });\n  };\n  const destroy = () => {\n    if (hostMutationObserver) {\n      hostMutationObserver.disconnect();\n      hostMutationObserver = undefined;\n    }\n    destroySlottedContentObserver();\n  };\n  const destroySlottedContentObserver = () => {\n    if (slottedContentMutationObserver) {\n      slottedContentMutationObserver.disconnect();\n      slottedContentMutationObserver = undefined;\n    }\n  };\n  return {\n    destroy,\n  };\n};\n","/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { printIonError } from \"../../utils/logging/index\";\nexport const getCounterText = (value, maxLength, counterFormatter) => {\n  const valueLength = value == null ? 0 : value.toString().length;\n  const defaultCounterText = defaultCounterFormatter(valueLength, maxLength);\n  /**\n   * If developers did not pass a custom formatter,\n   * use the default one.\n   */\n  if (counterFormatter === undefined) {\n    return defaultCounterText;\n  }\n  /**\n   * Otherwise, try to use the custom formatter\n   * and fallback to the default formatter if\n   * there was an error.\n   */\n  try {\n    return counterFormatter(valueLength, maxLength);\n  }\n  catch (e) {\n    printIonError('Exception in provided `counterFormatter`.', e);\n    return defaultCounterText;\n  }\n};\nconst defaultCounterFormatter = (length, maxlength) => {\n  return `${length} / ${maxlength}`;\n};\n"],"version":3}