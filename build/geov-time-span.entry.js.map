{"file":"geov-time-span.entry.esm.js","mappings":"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","names":[],"sources":["node_modules/@geovistory/design-system-web/dist/collection/components/geov-time-span/geov-time-span.css?tag=geov-time-span&encapsulation=shadow","node_modules/@geovistory/design-system-web/dist/collection/components/geov-time-span/geov-time-span.js"],"sourcesContent":[":host {\n  display: block;\n}\n","import { Fragment, h } from \"@stencil/core\";\nimport { sparqlJson } from \"../../lib/sparqlJson\";\nimport { getSSRData } from \"../../lib/ssr/getSSRData\";\nimport { setSSRData } from \"../../lib/ssr/setSSRData\";\nimport { setSSRId } from \"../../lib/ssr/setSSRId\";\nconst qr = (entityUri) => `\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\n    PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n    PREFIX owl: <http://www.w3.org/2002/07/owl#>\n    PREFIX xml: <http://www.w3.org/XML/1998/namespace>\n    PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>\n    PREFIX geo: <http://www.opengis.net/ont/geosparql#>\n    PREFIX time: <http://www.w3.org/2006/time#>\n    PREFIX ontome: <https://ontome.net/ontology/>\n    PREFIX geov: <http://geovistory.org/resource/>\n\n    SELECT\n      ?predicate # predicate uri\n      (SAMPLE(?y) as ?year)\n      (SAMPLE(?m) as ?month)\n      (SAMPLE(?d) as ?day)\n      (SAMPLE(?tUnit) as ?timeUnit)\n\n    WHERE {\n\n      # Innermost subquery:\n      {\n        # Select all properties of entity, group by predicate\n        # and select one sample object per predicate\n        SELECT ?predicate (sample(?o) as ?object) WHERE {\n          <${entityUri}> ?predicate ?o.\n        }\n        GROUP BY ?predicate\n      }.\n\n  \t  # Left year, month, day\n      OPTIONAL { ?object time:year ?y }.\n      OPTIONAL { ?object time:month ?m }.\n      OPTIONAL { ?object time:day ?d }.\n      OPTIONAL { ?object time:unitType ?tUnit }.\n  }\n\n  GROUP BY ?predicate ?object\n  # limit to max 50 predicate groups\n  LIMIT 50`;\n/**\n * This component queries and renders the dates of a time span as readable string\n *\n * - In case there are mutiple dates, the output is {earliest} – {latest}: `1739-11-25 – 1740-07-08`\n * - In case there is one date, the output is {date}: `1739-11-25`\n * - In case there is no date, the output is empty\n *\n * Remark: The predicates from Time Span to Date, like `crm:P81b begin of the end`, are not taken into account for\n * the retrieval of {earliest} and {latest}.\n *\n * @param rows\n */\nexport class GeovTimeSpan {\n  /*\n   * assigns an id to the component\n   */\n  constructor() {\n    this._ssrId = undefined;\n    this.data = undefined;\n    this.fetchBeforeRender = true;\n    this.sparqlEndpoint = undefined;\n    this.entityUri = undefined;\n    setSSRId(this);\n  }\n  async componentWillLoad() {\n    if (this.fetchBeforeRender) {\n      /**\n       * try to get data from ssr\n       */\n      this.data = getSSRData(this._ssrId);\n    }\n    if (!this.data) {\n      // set data to loading (in immutable way)\n      this.data = {\n        loading: true,\n      };\n      // fetch data via http\n      await this.fetchData() // <- await this promise!\n        .then(d => {\n        // filter language\n        this.data = d;\n        setSSRData(this._ssrId, d);\n        return d;\n      })\n        .catch(d => {\n        this.data = d;\n        return d;\n      });\n    }\n  }\n  async fetchData() {\n    let d = {\n      loading: true,\n    };\n    const query = qr(this.entityUri);\n    await sparqlJson(this.sparqlEndpoint, query)\n      .then(res => {\n      var _a;\n      d = {\n        loading: false,\n        rows: (_a = res === null || res === void 0 ? void 0 : res.results) === null || _a === void 0 ? void 0 : _a.bindings,\n      };\n    })\n      .catch(_ => {\n      d = {\n        loading: false,\n        error: true,\n      };\n    });\n    return d;\n  }\n  /**\n   * Converts the rows into a readable string\n   *\n   * In case there are mutiple dates, the output is {earliest} – {latest}:\n   * 1739-11-25 – 1740-07-08\n   *\n   * In case there is one date, the output is {date}:\n   * 1739-11-25\n   *\n   * In case there is no date, the output is empty\n   *\n   * @param rows\n   */\n  rowsToString(rows) {\n    const timeInfos = rows\n      // map rows to year month time\n      .map(r => this.getTime(r))\n      // filter items with time info\n      .filter(timeInfo => !!timeInfo.timeUnit)\n      // sort earliest date first\n      .sort((a, b) => {\n      // Compare years\n      if (a.year !== b.year) {\n        return a.year - b.year;\n      }\n      // Compare months\n      if (a.month !== b.month) {\n        return a.month - b.month;\n      }\n      // Compare days\n      return a.day - b.day;\n    });\n    // return if we have no time info\n    if (timeInfos.length === 0)\n      return;\n    const earliest = timeInfos[0];\n    const latest = timeInfos[timeInfos.length - 1];\n    if (earliest === latest)\n      return this.timeInfoToString(earliest);\n    return `${this.timeInfoToString(earliest)} – ${this.timeInfoToString(latest)}`;\n  }\n  /**\n   * Extracts TimeInfo from a Row\n   */\n  getTime(row) {\n    var _a, _b, _c, _d, _e, _f;\n    return {\n      year: parseInt((_a = row.year) === null || _a === void 0 ? void 0 : _a.value),\n      month: parseInt((_c = (_b = row.month) === null || _b === void 0 ? void 0 : _b.value) === null || _c === void 0 ? void 0 : _c.replace('--', '')),\n      day: parseInt((_e = (_d = row.day) === null || _d === void 0 ? void 0 : _d.value) === null || _e === void 0 ? void 0 : _e.replace('---', '')),\n      timeUnit: (_f = row.timeUnit) === null || _f === void 0 ? void 0 : _f.value,\n    };\n  }\n  /**\n   * Converts a timeInfo to a string\n   * @param timeInfo\n   * @returns\n   */\n  timeInfoToString(timeInfo) {\n    switch (timeInfo.timeUnit) {\n      case 'http://www.w3.org/2006/time#unitYear':\n        return `${timeInfo.year}`;\n      case 'http://www.w3.org/2006/time#unitMonth':\n        return `${timeInfo.year}-${timeInfo.month.toString().padStart(2, '0')}`;\n      case 'http://www.w3.org/2006/time#unitDay':\n      default:\n        return `${timeInfo.year}-${timeInfo.month.toString().padStart(2, '0')}-${timeInfo.day.toString().padStart(2, '0')}`;\n    }\n  }\n  render() {\n    return h(Fragment, null, this.rowsToString(this.data.rows));\n  }\n  static get is() { return \"geov-time-span\"; }\n  static get encapsulation() { return \"shadow\"; }\n  static get originalStyleUrls() {\n    return {\n      \"$\": [\"geov-time-span.css\"]\n    };\n  }\n  static get styleUrls() {\n    return {\n      \"$\": [\"geov-time-span.css\"]\n    };\n  }\n  static get properties() {\n    return {\n      \"_ssrId\": {\n        \"type\": \"string\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"string\",\n          \"resolved\": \"string\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"declares an _ssrId property that is reflected as attribute\"\n        },\n        \"attribute\": \"_ssr-id\",\n        \"reflect\": true\n      },\n      \"fetchBeforeRender\": {\n        \"type\": \"boolean\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"boolean\",\n          \"resolved\": \"boolean\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"if true, componentWillLoad() returns a promise for the loading of all data [default: true]\"\n        },\n        \"attribute\": \"fetch-before-render\",\n        \"reflect\": false,\n        \"defaultValue\": \"true\"\n      },\n      \"sparqlEndpoint\": {\n        \"type\": \"string\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"string\",\n          \"resolved\": \"string\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"sparqlEndpoint\\nURL of the sparql endpoint\"\n        },\n        \"attribute\": \"sparql-endpoint\",\n        \"reflect\": false\n      },\n      \"entityUri\": {\n        \"type\": \"string\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"string\",\n          \"resolved\": \"string\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"entityId\\nUri of subject, e.g. 'http://www.geovistory.org/ressource/iXXX'\"\n        },\n        \"attribute\": \"entity-uri\",\n        \"reflect\": false\n      }\n    };\n  }\n  static get states() {\n    return {\n      \"data\": {}\n    };\n  }\n}\n//# sourceMappingURL=geov-time-span.js.map\n"],"version":3}