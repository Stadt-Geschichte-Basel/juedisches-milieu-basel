{"file":"geov-display-string-literal.entry.esm.js","mappings":";;;AAAA,MAAM,2BAA2B,GAAG,sdAAsd;;MCU7e,+BAA+B;EAC1C;;IACE,IAAI,CAAC,YAAY,GAAG;MAClB,IAAI,CAAC,UAAU,EAAE,CAAC;KACnB,CAAC;IACF,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;IAC5B,IAAI,CAAC,KAAK,GAAG,SAAS,CAAC;IACvB,IAAI,CAAC,QAAQ,GAAG,SAAS,CAAC;GAC3B;EACD,gBAAgB;IACd,IAAI,CAAC,UAAU,EAAE,CAAC;IAClB,MAAM,CAAC,gBAAgB,CAAC,QAAQ,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;GACtD;EACD,UAAU;;IAER,IAAI,IAAI,CAAC,cAAc,IAAI,IAAI,CAAC,UAAU,EAAE;;MAE1C,IAAI,IAAI,CAAC,cAAc,CAAC,WAAW,GAAG,IAAI,CAAC,cAAc,CAAC,WAAW,EAAE;QACrE,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,OAAO,GAAG,OAAO,CAAC;OACzC;WACI;QACH,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,OAAO,GAAG,MAAM,CAAC;OACxC;KACF;GACF;EACD,IAAI;IACF,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC;GACtB;EACD,OAAO;IACL,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC;GACtB;EACD,MAAM;IACJ,QAAQ,CAAC,CAAC,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC,KAAK,EAAE,EAAE,KAAK,EAAE,SAAS,EAAE,EAAE,CAAC,CAAC,KAAK,EAAE,EAAE,KAAK,EAAE,mBAAmB,EAAE,EAAE,CAAC,CAAC,KAAK,EAAE,EAAE,GAAG,EAAE,OAAO,KAAK,IAAI,CAAC,cAAc,GAAG,OAAO,CAAC,EAAE,EAAE,IAAI,CAAC,KAAK,EAAE,GAAG,EAAE,IAAI,CAAC,QAAQ,IAAI,CAAC,CAAC,MAAM,EAAE,EAAE,KAAK,EAAE,aAAa,EAAE,EAAE,GAAG,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,YAAY,EAAE,EAAE,KAAK,EAAE,gBAAgB,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,MAAM,IAAI,CAAC,IAAI,EAAE,EAAE,GAAG,EAAE,EAAE,KAAK,IAAI,CAAC,UAAU,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,UAAU,EAAE,EAAE,IAAI,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,WAAW,EAAE,EAAE,GAAG,EAAE,OAAO,KAAK,IAAI,CAAC,KAAK,GAAG,OAAO,CAAC,EAAE,aAAa,EAAE,MAAM,IAAI,CAAC,OAAO,EAAE,EAAE,MAAM,EAAE,KAAK,EAAE,EAAE,CAAC,CAAC,YAAY,EAAE,IAAI,EAAE,CAAC,CAAC,aAAa,EAAE,IAAI,EAAE,CAAC,CAAC,aAAa,EAAE,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE,CAAC,CAAC,YAAY,EAAE,EAAE,OAAO,EAAE,MAAM,IAAI,CAAC,OAAO,EAAE,EAAE,EAAE,OAAO,CAAC,CAAC,EAAE,CAAC,CAAC,WAAW,EAAE,IAAI,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,aAAa,EAAE,EAAE,KAAK,EAAE,aAAa,EAAE,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE;GACvwB;;;;;;","names":[],"sources":["node_modules/@geovistory/design-system-web/dist/collection/components/geov-display-string-literal/geov-display-string-literal.css?tag=geov-display-string-literal&encapsulation=shadow","node_modules/@geovistory/design-system-web/dist/collection/components/geov-display-string-literal/geov-display-string-literal.js"],"sourcesContent":[":host {\n  display: block;\n}\n\n.wrapper {\n  display: flex;\n}\n\n.literal-container {\n  overflow: clip;\n  width: 100%;\n}\n\n.literal-container ion-button {\n  display: none;\n  margin-left: auto;\n}\n\n.label-container {\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n}\n\n.color-light {\n  color: var(--ion-color-step-600, black);\n}\n\n.label {\n  width: 100%;\n}\n\n.open-modal-btn {\n  min-height: 0;\n  padding: 0;\n  margin: 0 0 0 0.25rem;\n  --padding-inline-start: 0;\n  --padding-inline-end: 0;\n  --padding-top: 0;\n  --padding-bottom: 0;\n  --padding-start: 0;\n  --padding-end: 0;\n}\n\n/* ion-item {\n  border-top: var(--border-top, solid 1px #eee);\n  --padding-start: var(--padding-start);\n  --inner-padding-top: 0;\n  --min-height: var(--min-height);\n} */","import { Fragment, h } from \"@stencil/core\";\nimport { eye } from \"ionicons/icons\";\n/**\n * This component displays string literals (with and without language)\n *\n * If the displayed string is overflows, the component shows a button\n * to open a modal, where the full string is displayed.\n *\n * Resize the window to see the effect, in case the button is not displayed.\n */\nexport class GeovDisplayStringLiteralLiteral {\n  constructor() {\n    this.handleResize = () => {\n      this.resizePage();\n    };\n    this.modalTitle = undefined;\n    this.label = undefined;\n    this.language = undefined;\n  }\n  componentDidLoad() {\n    this.resizePage();\n    window.addEventListener('resize', this.handleResize);\n  }\n  resizePage() {\n    // Display Expand button if need. The page must be loaded in order to have the measurements\n    if (this.labelContainer && this.itemButton) {\n      // If size of text > size of container\n      if (this.labelContainer.scrollWidth > this.labelContainer.clientWidth) {\n        this.itemButton.style.display = 'block';\n      }\n      else {\n        this.itemButton.style.display = 'none';\n      }\n    }\n  }\n  open() {\n    this.modal.present();\n  }\n  dismiss() {\n    this.modal.dismiss();\n  }\n  render() {\n    return (h(Fragment, null, h(\"div\", { class: \"wrapper\" }, h(\"div\", { class: \"literal-container\" }, h(\"div\", { ref: element => (this.labelContainer = element) }, this.label, \" \", this.language && h(\"span\", { class: \"color-light\" }, \"@\", this.language))), h(\"ion-button\", { class: \"open-modal-btn\", size: \"small\", fill: \"clear\", onClick: () => this.open(), ref: el => (this.itemButton = el) }, h(\"ion-icon\", { icon: eye }))), h(\"ion-modal\", { ref: element => (this.modal = element), onWillDismiss: () => this.dismiss(), isOpen: false }, h(\"ion-header\", null, h(\"ion-toolbar\", null, h(\"ion-buttons\", { slot: \"end\" }, h(\"ion-button\", { onClick: () => this.dismiss() }, \"Close\")), h(\"ion-title\", null, this.modalTitle))), h(\"ion-content\", { class: \"ion-padding\" }, this.label))));\n  }\n  static get is() { return \"geov-display-string-literal\"; }\n  static get encapsulation() { return \"shadow\"; }\n  static get originalStyleUrls() {\n    return {\n      \"$\": [\"geov-display-string-literal.css\"]\n    };\n  }\n  static get styleUrls() {\n    return {\n      \"$\": [\"geov-display-string-literal.css\"]\n    };\n  }\n  static get properties() {\n    return {\n      \"modalTitle\": {\n        \"type\": \"string\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"string\",\n          \"resolved\": \"string\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"Title of the modal, that opens when user clicks on show button\"\n        },\n        \"attribute\": \"modal-title\",\n        \"reflect\": false\n      },\n      \"label\": {\n        \"type\": \"string\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"string\",\n          \"resolved\": \"string\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"The label (string) to display\"\n        },\n        \"attribute\": \"label\",\n        \"reflect\": false\n      },\n      \"language\": {\n        \"type\": \"string\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"string\",\n          \"resolved\": \"string\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [{\n              \"name\": \"\",\n              \"text\": \".\"\n            }],\n          \"text\": \"The language to display on the second line. Will be prefixed with\"\n        },\n        \"attribute\": \"language\",\n        \"reflect\": false\n      }\n    };\n  }\n}\n//# sourceMappingURL=geov-display-string-literal.js.map\n"],"version":3}